namespace Spirit
{
	itemdata script TestBounceItem //This item creates a basic spirited LWeapon
	{
		void run()
		{
			//Create the weapon and launch the script
			lweapon spirit = CreateLWeapon(LW_SCRIPT1, this->WeaponScript,
							 {this->WeaponInitD[0], this->WeaponInitD[1], this->WeaponInitD[2], this->WeaponInitD[3],
							 this->WeaponInitD[4], this->WeaponInitD[5], this->WeaponInitD[6], this->WeaponInitD[7]},
							 this->ID, Hero->X, Hero->Y, this->Power*2, this->Attributes[0], DirRad(Hero->Dir),
							 this->Sprites[0], this->UseSound, 0);
			spirit->Gravity = true;
		}
	}
	itemdata script WaveBeam //This item replicates Wave Beam from the Metroid series. Shoots a ball of energy which moves in a sine wave pattern.
	{
		void run()
		{
			//Create the weapon and launch the script
			lweapon spirit = CreateLWeapon(LW_SCRIPT1, this->WeaponScript,
							 {this->WeaponInitD[0], this->WeaponInitD[1], this->WeaponInitD[2], this->WeaponInitD[3],
							 this->WeaponInitD[4], this->WeaponInitD[5], this->WeaponInitD[6], this->WeaponInitD[7]},
							 this->ID, Hero->X, Hero->Y, this->Power*2, this->Attributes[0], DirRad(Hero->Dir),
							 this->Sprites[0], this->UseSound, 0);
		}
	}
	itemdata script RandomShots
	{
		void run()
		{
			CONFIG SHOTS = 1;
			int spiritD[8] = {this->WeaponInitD[0], this->WeaponInitD[1], this->WeaponInitD[2], this->WeaponInitD[3], this->WeaponInitD[4], this->WeaponInitD[5], this->WeaponInitD[6], this->WeaponInitD[7]};
			repeat(SHOTS)
			{
				lweapon spirit = CreateLWeapon(LW_SCRIPT1, this->WeaponScript, spiritD, this->ID, Hero->X, Hero->Y, this->Power*2, this->Attributes[0], Randf(0, PI*2), this->Sprites[0], this->UseSound, LWF_JUMPPHYSICS|LWF_OBEYSOLID);
				spirit->Gravity = true;
				Move::AirAdjust(spirit, spirit->Step, 3);
				//Create the weapon and launch the script... 8 times
			}
		}
	}
	
	lweapon script TestVeer
	{
		void run()
		{
			//Start of the script. Declare your working variables here as well as any counters you need to use.
			float work[1];

			while(IsAlive(this)) //The main body of the script. The stuff the weapon actually does goes here.
			{
				Move::Veer(this, work, 5, 90);
				
				Waitframe(this); //End of the frame. Run the necessary updates for the weapon here like their counter.
			}
			//Weapon is dead. Run death effects here.
			
		}
	}
	
	lweapon script TestDrift
	{
		void run()
		{
			//Start of the script. Declare your working variables here as well as any counters you need to use.

			while(IsAlive(this)) //The main body of the script. The stuff the weapon actually does goes here.
			{
				Move::Drift(this, 50, 90);
				
				Waitframe(this); //End of the frame. Run the necessary updates for the weapon here like their counter.
			}
			//Weapon is dead. Run death effects here.
			
		}
	}
	
	//Weapon moves in a sine wave like what Wave Beam does in Metroid
	lweapon script WaveShot
	{
		void run(int amp, int initangle, int rot)
		{
			untyped work[1];
			this->Extend = 3;
			this->TileWidth = 4;
			this->TileHeight = 4;
			this->HitWidth = 64;
			this->HitHeight = 64;

			while(IsAlive(this)) //The main body of the script. The stuff the weapon actually does goes here.
			{
				Move::Sine(this, work, amp, initangle, rot);
				SolidRectCollision(this->X, this->Y, this->X+this->HitWidth, this->Y+this->HitHeight);
				//Trace(this->X);
				//Trace(this->Y);
				
				Waitframe(this); //End of the frame. Run the necessary updates for the weapon here like their counter.
			}
			//Weapon is dead. Run death effects here.
			
		}
	}
	
	lweapon script TestBounceWeapon
	{
		void run()
		{
			//Start of the script. Declare your working variables here as well as any counters you need to use.
			float work[4];
			
			while(IsAlive(this)) //The main body of the script. The stuff the weapon actually does goes here.
			{
				Move::Bounce(this, work, 3, 0.6, 30);
				//Trace(this->Jump);
				if(work[0] > 5)
				{
					Kill(this);
				}
				Waitframe(this); //End of the frame. Run the necessary updates for the weapon here like their counter.
			}
			//Weapon is dead. Run death effects here.
			
		}
	}
	
	lweapon script Tornado
	{
		void run()
		{
			//Start of the script. Declare your working variables here as well as any counters you need to use.
			
			while(IsAlive(this)) //The main body of the script. The stuff the weapon actually does goes here.
			{
				Waitframe(this); //End of the frame. Run the necessary updates for the weapon here like their counter.
			}
			//Weapon is dead. Run death effects here.
			Remove(this);
		}
	}

	itemdata script PauseWeapons
	{
		void run()
		{
			TraceS("PauseWeapons Used:\n");
			ToggleSuspend();
			if(IsSuspended())
				TraceS("Header is suspended\n");
			else
				TraceS("Header is not suspended\n");
		}
	}
}